import { Component } from '@angular/core';
import { CategoryType, ITodo } from 'src/app/mocks/todo.mock';
// import { FormsModule } from '@angular/forms';
import { BasketService } from 'src/app/services/basket/basket.service';

@Component({
  selector: 'app-tasks',
  templateUrl: './tasks.component.html',
  styleUrls: ['./tasks.component.css']
})
export class TasksComponent {

  //Tableau de string avec les diff√©rentes cat√©gories possibles pour une t√¢che.
  categories: CategoryType[] = ["üõçÔ∏è", "üíäÔ∏è", "üíº", "üí∏", "üßº", "ü§∑‚Äç‚ôÄÔ∏è"];
  //Propri√©t√© optionnelle repr√©sentant la cat√©gorie s√©lectionn√©e pour une t√¢che.
  selectedCategory: CategoryType | undefined;

  // C'est un objet repr√©sentant une t√¢che avec les propri√©t√©s de l'interface. Elle va permettre de stocker les informations.
  task: ITodo = {
    id: 0,
    content: '',
    category: ''as CategoryType,
    isUrgent: false,
    doneDate: new Date(),
    // doneDate: null,
    // done: false, 
  };
  //Bool√©en pour indiquer si le bouton de validation est activ√© ou non.
  isButtonDisabled: boolean = true;
  //Bool√©en qui indique si une cat√©gorie a √©t√© s√©lectionn√©e ou non
  isSelected: boolean = false;
  // Ajouter une variable pour stocker le dernier ID utilis√©
  lastId: number; 
  // selectedId: number;


  constructor(private basketService: BasketService) {
    this.isButtonDisabled = true
  // R√©cup√©rer la derni√®re valeur d'ID utilis√©e depuis le LocalStorage
    this.lastId = parseInt(localStorage.getItem('lastId') || '0');
  // this.selectedId = parseInt(localStorage.getItem('selectedId') || '0');
    
  
}


  // M√©thode est appel√©e lors de la validation d'une t√¢che √† accomplir.
  validateTask(): void {

    // Elle va v√©rifier si une cat√©gorie a √©t√© s√©lectionn√©e et si le contenu de la t√¢che n'est pas vide.
    if (this.selectedCategory !== undefined && this.task.content  !== '')
    //Si c'est le cas, elle active le bouton de validation mais sans cette validation, le bouton est inactif.
    {
      this.isButtonDisabled = false;
    } else {
      this.isButtonDisabled = true;
    }

    // Elle va cr√©er un objet "taskData" avec les propri√©t√©s de la t√¢che. 
    const taskData = {
      id: ++this.lastId, // Incr√©menter l'ID √† chaque nouvel objet cr√©√©
      content: this.task.content,
      category: this.selectedCategory,
      isUrgent: this.task.isUrgent,
      doneDate: null,
      // done: this.task.done,
    };

    // Puis elle va ajouter et sauvegarder la t√¢che de la BasketService.
    this.basketService.addTask(taskData);
    this.basketService.saveTasks();
    console.log(taskData);
    // Stocker la nouvelle valeur d'ID dans le LocalStorage
    localStorage.setItem('lastId', this.lastId.toString());
    // localStorage.setItem('selectedId', this.selectedId.toString());
  }

  //Cette m√©thode est utilis√©e pour la s√©lection de la cat√©gorie d'une t√¢che, prenant en param√®tre la seule category s√©l√©ction√©e.
  selectCategory(category: CategoryType): void {
    //Cette propri√©t√© "selectedCategory" contiendra le string correspondant √† la cat√©gorie s√©lectionn√©e
    this.selectedCategory = category;
    // this.validateTask();
    this.isSelected = true;
  }


}
