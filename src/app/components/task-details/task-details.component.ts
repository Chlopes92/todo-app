import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CategoryType, ITodo } from 'src/app/mocks/todo.mock';
import { BasketService } from 'src/app/services/basket/basket.service';

@Component({
  selector: 'app-task-details',
  templateUrl: './task-details.component.html',
  styleUrls: ['./task-details.component.css']
})

export class TaskDetailsComponent {

tasks?:ITodo[];
  //Tableau de string avec les diff√©rentes cat√©gories possibles pour une t√¢che.
categories: CategoryType[] = ["üõçÔ∏è", "üíäÔ∏è", "üíº", "üí∏", "üßº", "ü§∑‚Äç‚ôÄÔ∏è"];
//Propri√©t√© optionnelle repr√©sentant la cat√©gorie s√©lectionn√©e pour une t√¢che.
selectedCategory: CategoryType | undefined;
// C'est un objet repr√©sentant une t√¢che avec les propri√©t√©s de l'interface. Elle va permettre de stocker les informations.
task: ITodo = {
  id: 0,
  content: '',
  category:'' as CategoryType,
  isUrgent: false,
  doneDate: new Date(),
  // doneDate: null,
  // done: false, 
};
//Bool√©en pour indiquer si le bouton de validation est activ√© ou non.
isButtonDisabled: boolean = true;
//Bool√©en qui indique si une cat√©gorie a √©t√© s√©lectionn√©e ou non
isSelected: boolean = false;
// Ajouter une variable pour stocker le dernier ID utilis√©
lastId: number; 

constructor(private basketService: BasketService, private activatedRoute: ActivatedRoute, private route: Router) {
  this.isButtonDisabled = true
// R√©cup√©rer la derni√®re valeur d'ID utilis√©e depuis le LocalStorage
  this.lastId = parseInt(localStorage.getItem('lastId') || '0');
}

ngOnInit(){
  // R√©cup√©rer l'ID de la t√¢che s√©lectionn√©e depuis le LocalStorage
  // const selectedTaskId = parseInt(localStorage.getItem('selectedTaskId') || '0');
  //   // Charger la t√¢che s√©lectionn√©e en utilisant l'ID
  //   this.basketService.getTasks(selectedTaskId).subscribe((task: ITodo[]) => {
  //     this.tasks = task;
  //     this.selectedCategory = task.category;
  //   });
  
  this.basketService.getTasks().subscribe((tasks: ITodo[]) => {
    this.tasks = tasks;
  });

 if(this.tasks)
 this.tasks.forEach(
  task =>{
    if(task.id === this.lastId) {
      this.task = task;
    }
  } 

 );
 this.selectedCategory = this.task.category;
}



// M√©thode est appel√©e lors de la validation d'une t√¢che √† accomplir.
validateTask(): void {

  // Elle va v√©rifier si une cat√©gorie a √©t√© s√©lectionn√©e et si le contenu de la t√¢che n'est pas vide.
  if (this.selectedCategory !== undefined && this.task.content  !== '')
  //Si c'est le cas, elle active le bouton de validation mais sans cette validation, le bouton est inactif.
  {
    this.isButtonDisabled = false;
  } else {
    this.isButtonDisabled = true;
  }

  // Elle va cr√©er un objet "taskData" avec les propri√©t√©s de la t√¢che. 
  const taskData = {
    id: ++this.lastId, // Incr√©menter l'ID √† chaque nouvel objet cr√©√©
    content: this.task.content,
    category: this.selectedCategory,
    isUrgent: this.task.isUrgent,
    doneDate: null,
    // done: this.task.done,
  };

  // Puis elle va ajouter et sauvegarder la t√¢che de la BasketService.
  this.basketService.addTask(taskData);
  this.basketService.saveTasks();
  console.log(taskData);
  // Stocker la nouvelle valeur d'ID dans le LocalStorage
  localStorage.setItem('lastId', this.lastId.toString());
}

//Cette m√©thode est utilis√©e pour la s√©lection de la cat√©gorie d'une t√¢che, prenant en param√®tre la seule category s√©l√©ction√©e.
selectCategory(category: CategoryType): void {
  //Cette propri√©t√© "selectedCategory" contiendra le string correspondant √† la cat√©gorie s√©lectionn√©e
  this.selectedCategory = category;
  // this.validateTask();
  this.isSelected = true;
}

}
